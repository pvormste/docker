#!/usr/bin/env bash

_awkArch() {
	local awkExpr="$1"; shift
	awk "$@" "/^#|^\$/ { next } $awkExpr" release-architectures
}

hasBashbrewArch() {
	local bashbrewArch="$1"; shift
	_awkArch 'BEGIN { exitCode = 1 } $1 == bashbrewArch { exitCode = 0 } END { exit exitCode }' -v bashbrewArch="$bashbrewArch"
}

apkArches() {
	_awkArch '{ print $2 }'
}

apkToDockerArch() {
	local apkArch="$1"; shift
	_awkArch '$2 == apkArch { print $3; exit }' -v apkArch="$apkArch"
}

apkToBashbrewArch() {
	local apkArch="$1"; shift
	_awkArch '$2 == apkArch { print $1; exit }' -v apkArch="$apkArch"
}

_generateParentRepoToArches() {
	local repo="$1"; shift
	local officialImagesUrl='https://github.com/docker-library/official-images/raw/master/library/'

	eval "declare -g -A parentRepoToArches=( $(
		find -name 'Dockerfile' -exec awk '
				toupper($1) == "FROM" && $2 !~ /^('"$repo"'|scratch|.*\/.*)(:|$)/ {
					print "'"$officialImagesUrl"'" $2
				}
			' '{}' + \
			| sort -u \
			| xargs bashbrew cat --format '[{{ .RepoName }}:{{ .TagName }}]="{{ join " " .TagEntry.Architectures }}"'
	) )"
}
_generateParentRepoToArches 'docker'

versionChannel() {
	local version="$1"; shift # "17.06", "17.11-rc", etc
	local rcVersion="${version%-rc}"

	local channel='stable'
	if [ "$rcVersion" != "$version" ]; then
		channel='test'
	fi

	echo "$channel"
}
